// @flow

import React from 'react';
import { View, Text, ScrollView } from 'react-native';
import { Field, change } from 'redux-form';
import styles from './styles';
import {
    CtButton,
    DefaultLayout,
    InputField,
    ToggleSwitch,
    CtDivider,
    Tabs,
    Editor,
    PLACEHOLDER_TYPES
} from '@/components';
import { CUSTOMIZE_FORM, CUSTOMIZE_TYPE, PAYMENT_TABS } from '../../constants';
import Lng from '@/lang/i18n';
import { goBack, MOUNT, UNMOUNT, ROUTES } from '@/navigation';
import { PaymentModes } from './PaymentModes';
import { Units } from './Units';
import { headerTitle } from '@/styles';
import { hasObjectLength } from '@/constants';

type IProps = {
    navigation: Object,
    formValues: Object,
    locale: String,
    type: String,
    loading: Boolean,
    isLoading: Boolean,
    handleSubmit: Function,
    getCustomizeSettings: Function,
    customizes: Object,
    setCustomizeSettings: Function
};

export class Customize extends React.Component<IProps> {
    constructor(props) {
        super(props);
        this.paymentChild = React.createRef();
        this.itemChild = React.createRef();
        this.toastReference = React.createRef();

        this.state = {
            data: {},
            isUpdateAutoGenerate: false,
            activeTab: PAYMENT_TABS.MODE
        };
    }

    componentDidMount() {
        const { getCustomizeSettings, customizes, navigation } = this.props;

        let hasCustomizeApiCalled = customizes
            ? typeof customizes === 'undefined' || customizes === null
            : true;

        hasCustomizeApiCalled && getCustomizeSettings();

        this.setState({ data: this.setParams() });

        goBack(MOUNT, navigation);
    }

    componentWillUnmount() {
        this.state.isUpdateAutoGenerate &&
            this.props.setCustomizeSettings({ customizes: null });
        goBack(UNMOUNT);
    }

    setParams = (values = null) => {
        const { type } = this.props;
        let params = {};

        switch (type) {
            case CUSTOMIZE_TYPE.INVOICES:
                if (values) {
                    params = {
                        ...values,
                        type: 'INVOICES'
                    };
                } else {
                    params = {
                        headerTitle: 'header.invoices',
                        prefixLabel: 'customizes.prefix.invoice',
                        prefixName: 'invoice_prefix',
                        autoGenerateTitle: 'customizes.autoGenerate.invoice',
                        autoGenerateName: 'invoice_auto_generate',
                        autoGenerateDescription:
                            'customizes.autoGenerate.invoiceDescription',
                        settingLabel: 'customizes.setting.invoice',
                        sendMailBodyLabel:
                            'customizes.addresses.sendInvoiceEmailBody',
                        sendMailBodyName: 'invoice_mail_body',
                        companyAddressFormatLabel:
                            'customizes.addresses.company',
                        companyAddressFormatName:
                            'invoice_company_address_format',
                        shippingAddressFormatLabel:
                            'customizes.addresses.shipping',
                        shippingAddressFormatName:
                            'invoice_shipping_address_format',
                        billingAddressFormatLabel:
                            'customizes.addresses.billing',
                        billingAddressFormatName:
                            'invoice_billing_address_format'
                    };
                }
                break;

            case CUSTOMIZE_TYPE.ESTIMATES:
                if (values) {
                    params = {
                        ...values,
                        type: 'ESTIMATES'
                    };
                } else {
                    params = {
                        headerTitle: 'header.estimates',
                        prefixLabel: 'customizes.prefix.estimate',
                        prefixName: 'estimate_prefix',
                        autoGenerateTitle: 'customizes.autoGenerate.estimate',
                        autoGenerateName: 'estimate_auto_generate',
                        keyName: 'estimateAutoGenerate',
                        autoGenerateDescription:
                            'customizes.autoGenerate.estimateDescription',
                        settingLabel: 'customizes.setting.estimate',
                        sendMailBodyLabel:
                            'customizes.addresses.sendEstimateEmailBody',
                        sendMailBodyName: 'estimate_mail_body',
                        companyAddressFormatLabel:
                            'customizes.addresses.company',
                        companyAddressFormatName:
                            'estimate_company_address_format',
                        shippingAddressFormatLabel:
                            'customizes.addresses.shipping',
                        shippingAddressFormatName:
                            'estimate_shipping_address_format',
                        billingAddressFormatLabel:
                            'customizes.addresses.billing',
                        billingAddressFormatName:
                            'estimate_billing_address_format'
                    };
                }
                break;

            case CUSTOMIZE_TYPE.PAYMENTS:
                if (values) {
                    params = {
                        ...values,
                        type: 'PAYMENTS'
                    };
                } else {
                    params = {
                        headerTitle: 'header.payments',
                        prefixLabel: 'customizes.prefix.payment',
                        prefixName: 'payment_prefix',
                        autoGenerateTitle: 'customizes.autoGenerate.payment',
                        autoGenerateName: 'payment_auto_generate',
                        autoGenerateDescription:
                            'customizes.autoGenerate.paymentDescription',
                        settingLabel: 'customizes.setting.payment',
                        sendMailBodyLabel:
                            'customizes.addresses.sendPaymentEmailBody',
                        sendMailBodyName: 'payment_mail_body',
                        companyAddressFormatLabel:
                            'customizes.addresses.company',
                        companyAddressFormatName:
                            'payment_company_address_format',
                        customerAddressFormatLabel:
                            'customizes.addresses.customerAddress',
                        customerAddressFormatName:
                            'payment_from_customer_address_format'
                    };
                }
                break;

            case CUSTOMIZE_TYPE.ITEMS:
                params = {
                    headerTitle: 'header.units'
                };
                break;

            default:
                break;
        }

        return params;
    };

    setFormField = (field, value) => {
        this.props.dispatch(change(CUSTOMIZE_FORM, field, value));
    };

    changeAutoGenerateStatus = (field, status) => {
        this.setFormField(field, status);

        const { editSettingItem } = this.props;

        const settings = {
            [field]: status === true ? 'YES' : 'NO'
        };

        editSettingItem({
            params: {
                settings
            },
            hasCustomize: true,
            onResult: () => {
                this.toastReference?.show?.(
                    'settings.preferences.settingUpdate'
                );
                this.setState({ isUpdateAutoGenerate: true });
            }
        });
    };

    onSave = values => {
        const { editCustomizeSettings, navigation } = this.props;
        const params = this.setParams(values);

        editCustomizeSettings({ params, navigation });
    };

    BOTTOM_ACTION = () => {
        const { locale, loading, handleSubmit, type } = this.props;
        const { activeTab } = this.state;

        let isPaymentMode =
            type === CUSTOMIZE_TYPE.PAYMENTS && activeTab === PAYMENT_TABS.MODE;
        let isItemScreen = type === CUSTOMIZE_TYPE.ITEMS;

        let title =
            isPaymentMode || isItemScreen ? 'button.add' : 'button.save';

        return (
            <View style={styles.submitButton}>
                <View style={{ flex: 1 }}>
                    <CtButton
                        onPress={() =>
                            isPaymentMode
                                ? this.paymentChild.current.openModal()
                                : isItemScreen
                                ? this.itemChild.current.openModal()
                                : handleSubmit(this.onSave)()
                        }
                        btnTitle={Lng.t(title, { locale })}
                        containerStyle={styles.handleBtn}
                        loading={loading}
                    />
                </View>
            </View>
        );
    };

    TOGGLE_FIELD_VIEW = (locale, data) => {
        return (
            <ScrollView bounces={false} showsVerticalScrollIndicator={false}>
                <CtDivider dividerStyle={styles.dividerLine} />

                <Text style={styles.autoGenerateHeader}>
                    {Lng.t(data.settingLabel, { locale })}
                </Text>
                <Field
                    name={data.autoGenerateName}
                    component={ToggleSwitch}
                    hint={Lng.t(data.autoGenerateTitle, { locale })}
                    description={Lng.t(data.autoGenerateDescription, {
                        locale
                    })}
                    onChangeCallback={val =>
                        this.changeAutoGenerateStatus(
                            data.autoGenerateName,
                            val
                        )
                    }
                />
            </ScrollView>
        );
    };

    PREFIX_FIELD = (locale, data) => {
        return (
            <Field
                name={data.prefixName}
                component={InputField}
                hint={Lng.t(data.prefixLabel, { locale })}
                inputProps={{
                    returnKeyType: 'next',
                    autoCorrect: true,
                    autoCapitalize: 'characters',
                    maxLength: 5
                }}
                fieldName={Lng.t('customizes.prefix.title', { locale })}
                maxCharacter={5}
                isRequired
            />
        );
    };

    getTextAreaPlaceholderTypes = () => {
        const TYPE = PLACEHOLDER_TYPES;
        let fieldType = '';

        switch (this.props.type) {
            case CUSTOMIZE_TYPE.INVOICES:
                fieldType = TYPE.INVOICE;
                break;

            case CUSTOMIZE_TYPE.ESTIMATES:
                fieldType = TYPE.ESTIMATE;
                break;

            case CUSTOMIZE_TYPE.PAYMENTS:
                fieldType = TYPE.PAYMENT;
                break;

            default:
                break;
        }

        const company = [TYPE.PREDEFINE_COMPANY, fieldType];
        const email = [TYPE.PREDEFINE_CUSTOMER, TYPE.CUSTOMER, fieldType];
        const shipping = [
            TYPE.PREDEFINE_SHIPPING,
            TYPE.PREDEFINE_CUSTOMER,
            TYPE.CUSTOMER,
            fieldType
        ];
        const billing = [
            TYPE.PREDEFINE_BILLING,
            TYPE.PREDEFINE_CUSTOMER,
            TYPE.CUSTOMER,
            fieldType
        ];
        const customer = [
            TYPE.PREDEFINE_BILLING,
            TYPE.PREDEFINE_CUSTOMER,
            TYPE.CUSTOMER,
            TYPE.PAYMENT
        ];

        return {
            email,
            company,
            shipping,
            billing,
            customer
        };
    };

    TEXTAREA_FIELDS = () => {
        const { data } = this.state;
        const { type } = this.props;
        const {
            email,
            company,
            shipping,
            billing,
            customer
        } = this.getTextAreaPlaceholderTypes();

        return (
            <>
                <Editor
                    {...this.props}
                    types={email}
                    name={data.sendMailBodyName}
                    label={data.sendMailBodyLabel}
                />

                <Editor
                    {...this.props}
                    types={company}
                    name={data.companyAddressFormatName}
                    label={data.companyAddressFormatLabel}
                />

                {type !== CUSTOMIZE_TYPE.PAYMENTS ? (
                    <>
                        <Editor
                            {...this.props}
                            types={shipping}
                            name={data.shippingAddressFormatName}
                            label={data.shippingAddressFormatLabel}
                        />

                        <Editor
                            {...this.props}
                            types={billing}
                            name={data.billingAddressFormatName}
                            label={data.billingAddressFormatLabel}
                        />
                    </>
                ) : (
                    <Editor
                        {...this.props}
                        types={customer}
                        name={data.customerAddressFormatName}
                        label={data.customerAddressFormatLabel}
                    />
                )}
            </>
        );
    };

    setActiveTab = activeTab => {
        this.setState({ activeTab });
    };

    PAYMENT_CUSTOMIZE_TAB = () => {
        const { locale } = this.props;
        const { activeTab, data } = this.state;

        return (
            <Tabs
                activeTab={activeTab}
                style={styles.tabs}
                tabStyle={styles.tabView}
                setActiveTab={this.setActiveTab}
                tabs={[
                    {
                        Title: PAYMENT_TABS.MODE,
                        tabName: Lng.t('payments.modes', { locale }),
                        render: (
                            <PaymentModes
                                ref={this.paymentChild}
                                props={this.props}
                                setFormField={(field, value) =>
                                    this.setFormField(field, value)
                                }
                            />
                        )
                    },
                    {
                        Title: PAYMENT_TABS.PREFIX,
                        tabName: Lng.t('payments.prefix', { locale }),
                        render: (
                            <View style={styles.bodyContainer}>
                                <ScrollView
                                    showsVerticalScrollIndicator={false}
                                    keyboardShouldPersistTaps="handled"
                                >
                                    {this.PREFIX_FIELD(locale, data)}
                                    {this.TEXTAREA_FIELDS()}
                                    {this.TOGGLE_FIELD_VIEW(locale, data)}
                                </ScrollView>
                            </View>
                        )
                    }
                ]}
            />
        );
    };

    render() {
        const { navigation, locale, type, isLoading, formValues } = this.props;
        const { data } = this.state;

        let isItemsScreen = type === CUSTOMIZE_TYPE.ITEMS;
        let isPaymentsScreen = type === CUSTOMIZE_TYPE.PAYMENTS;

        let loading = isItemsScreen
            ? !hasObjectLength(data)
            : !hasObjectLength(data) ||
              isLoading ||
              !hasObjectLength(formValues);

        return (
            <DefaultLayout
                headerProps={{
                    leftIconPress: () => navigation.navigate(ROUTES.CUSTOMIZES),
                    title: Lng.t(data.headerTitle, { locale }),
                    titleStyle: headerTitle({
                        marginLeft: -26,
                        marginRight: -50
                    }),
                    rightIconPress: null,
                    placement: 'center'
                }}
                bottomAction={this.BOTTOM_ACTION()}
                loadingProps={{ is: loading }}
                hideScrollView
                toastProps={{
                    reference: ref => (this.toastReference = ref)
                }}
            >
                {isPaymentsScreen && this.PAYMENT_CUSTOMIZE_TAB()}

                {isItemsScreen && (
                    <Units
                        ref={this.itemChild}
                        props={this.props}
                        setFormField={(field, value) =>
                            this.setFormField(field, value)
                        }
                    />
                )}

                {!isPaymentsScreen && !isItemsScreen && (
                    <View style={styles.bodyContainer}>
                        <ScrollView
                            showsVerticalScrollIndicator={false}
                            keyboardShouldPersistTaps="handled"
                        >
                            {this.PREFIX_FIELD(locale, data)}
                            {this.TEXTAREA_FIELDS()}
                            {this.TOGGLE_FIELD_VIEW(locale, data)}
                        </ScrollView>
                    </View>
                )}
            </DefaultLayout>
        );
    }
}
